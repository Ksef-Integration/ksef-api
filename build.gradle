import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.openapi.generator' version '7.6.0'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    id 'java'
    id 'maven-publish'
    id 'net.researchgate.release' version '3.0.2'
}

group = 'com.calendar.api'

def baseVersion = project.version
def gitRef = System.getenv("GITHUB_REF") ?: "refs/heads/local"
def isMasterBranch = gitRef.endsWith("/master")
version = isMasterBranch ? baseVersion : "${baseVersion}-SNAPSHOT"

ext {
    springBootVersion = '3.5.3'
    jacksonKotlinVersion = '2.19.1'
    swaggerAnnotationsVersion = '2.2.31'
    springdocVersion = '2.8.9'
}

repositories {
    mavenCentral()
}

def generatedDir = layout.buildDirectory.dir("generated/api").get().asFile

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java.srcDirs += file("${generatedDir}/src/main/kotlin")
        kotlin.srcDirs += file("${generatedDir}/src/main/kotlin")
    }
}

dependencies {
    compileOnly "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compileOnly "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    compileOnly "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly "io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion"
    compileOnly "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocVersion"
}

tasks.withType(KotlinCompile).configureEach {
    dependsOn tasks.named("openApiGenerate")
    kotlinOptions {
        jvmTarget = "21"
    }
}

tasks.named("compileJava") {
    dependsOn tasks.named("openApiGenerate")
}

tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn tasks.named("openApiGenerate")
}

openApiGenerate {
    generatorName.set("kotlin-spring")
    inputSpec.set("$rootDir/api/main-api-file.yaml")
    outputDir.set(generatedDir.toString())

    apiPackage.set("com.calendar.api.api")
    invokerPackage.set("com.calendar.api.invoker")
    modelPackage.set("com.calendar.api.model")

    configOptions.set([
            "interfaceOnly": "true",
            "dateLibrary": "java8",
            "useSpringBoot3": "true",
            "reactive": "false"
    ])
}

tasks.named("openApiGenerate") {
    doFirst {
        delete file(generatedDir)
    }
}

tasks.register("generateServer") {
    dependsOn tasks.named("openApiGenerate")
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = "calendar-api"
            version = project.version
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/collab-timekit/calendar-api")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.token")
            }
        }
    }
}

release {
    tagTemplate = 'v${version}'
    versionPropertyFile = 'gradle.properties'
    failOnSnapshotDependencies = false
    preTagCommitMessage = '[Release] - pre tag'
    tagCommitMessage = '[Release] - tag v${version}'
    newVersionCommitMessage = '[Release] - next version bumped to $version'

    git {
        requireBranch.set("master")
    }
}